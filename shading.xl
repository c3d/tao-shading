// Shading module definition
//
// This module allows to apply some shading effects
//
// Copyright 2010-2011 Taodyne

module_description
    id "c09af2a2-448a-4844-85f3-ab06073f29b4"
    name "Shading"
    import_name "Shading"
    description "A module that allows to add some shading effects to a scene"
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version "1.0"

module_description "fr",
    name "Ombrage"
    description "Permet d'ajouter des effets d'ombrages non-photoréalistes dans une scène."

SHADER4_AVAILABLE_SHADING -> true
SHADER4_AVAILABLE_SHADING := is_ext_available "GL_EXT_gpu_shader4"

// -------------------------------------------------------------------------------------------------------------------
//   Cel shading (or Toon shading)
//   For further informations, see http://en.wikipedia.org/wiki/Cel-shaded_animation
// -------------------------------------------------------------------------------------------------------------------
//Define cell-shading color
CELL_COLOR_R -> 1.0
CELL_COLOR_R := 1.0
CELL_COLOR_G -> 1.0
CELL_COLOR_G := 1.0
CELL_COLOR_B -> 1.0
CELL_COLOR_B := 1.0

cel_color r:real, g:real, b:real ->
    /**
    * Define main color of cell shading.
    **/
    CELL_COLOR_R := r
    CELL_COLOR_G := g
    CELL_COLOR_B := b

cel_shading ->
    if SHADER4_AVAILABLE_SHADING = true then
        cel_shading_lights
    else
        cel_shading_no_lights

cel_shading_lights ->
    /**
    * Apply cell shading on current scene with a full support of lights.
    **/
    shader_program
        shader_log
        vertex_shader <<
            varying vec3 normal;
            varying vec3 eyePos;
            void main()
            {
                gl_Position = ftransform();

                normal = normalize(gl_NormalMatrix * gl_Normal);
                eyePos = normalize((gl_ModelViewMatrix * gl_Vertex).xyz);
            }
            >>
        fragment_shader <<
            #extension GL_EXT_gpu_shader4 : require

            uniform vec3 cel_color;
            uniform int  lights;

            varying vec3 normal;
            varying vec3 eyePos;
            void main()
            {
                // Define a maximum of lights
                int MAX_LIGHTS = 8;

                float diff = 0.0;
                float spec = 0.0;

                if(lights == 0)
                {
                    vec3 lightDir       = normalize(gl_LightSource[0].position.xyz - eyePos);
                    vec3 reflectVec     = normalize(reflect( -lightDir, normal ));

                    //Diffuse intensity
                    diff = max(dot(normal,lightDir), 0.0);

                    //Specular intensity
                    if (diff > 0.0)
                       spec = max(dot(reflectVec, -eyePos), 0.0);

                    diff = diff * 0.6 + spec * 0.4;
                }
                else
                {
                    for(int i = 0; i < MAX_LIGHTS; i++)
                    {
                        if(bool(lights & (1 << i)))
                        {
                            vec3 lightDir       = normalize(gl_LightSource[i].position.xyz - eyePos);
                            vec3 reflectVec     = normalize(reflect( -lightDir, normal ));

                            //Diffuse intensity
                            float diffTmp = max(dot(normal,lightDir), 0.0);

                            //Specular intensity
                            if (diffTmp > 0.0)
                               spec = max(dot(reflectVec, -eyePos), 0.0);

                            diff +=  diffTmp * 0.6 + spec * 0.4;
                        }
                    }
                }

                vec3 color;
                //Compute final color
                if(diff < 0.2)
                   color = cel_color * 0.5;
                else if(diff < 0.5)
                   color = cel_color * 0.75;
                else
                   color = cel_color;
                gl_FragColor = vec4(color, 1.0);
            }
            >>
    shader_set lights    := lights_mask
    shader_set cel_color := (CELL_COLOR_R; CELL_COLOR_G; CELL_COLOR_B)

cel_shading_no_lights ->
    /**
    * Apply cell shading on current scene with a support of an unique light.
    **/
    shader_program
        shader_log
        vertex_shader <<
            varying vec3 normal;
            varying vec3 eyePos;
            void main()
            {
                gl_Position = ftransform();

                normal = normalize(gl_NormalMatrix * gl_Normal);
                eyePos = normalize((gl_ModelViewMatrix * gl_Vertex).xyz);
            }
            >>
        fragment_shader <<
            uniform vec3 cel_color;

            varying vec3 normal;
            varying vec3 eyePos;
            void main()
            {
                float diff = 0.0;
                float spec = 0.0;

                vec3 lightDir       = normalize(gl_LightSource[0].position.xyz - eyePos);
                vec3 reflectVec     = normalize(reflect( -lightDir, normal ));

                //Diffuse intensity
                diff = max(dot(normal,lightDir), 0.0);

                //Specular intensity
                if (diff > 0.0)
                   spec = max(dot(reflectVec, -eyePos), 0.0);

                diff = diff * 0.6 + spec * 0.4;

                vec3 color;
                //Compute final color
                if(diff < 0.2)
                   color = cel_color * 0.5;
                else if(diff < 0.5)
                   color = cel_color * 0.75;
                else
                   color = cel_color;
                gl_FragColor = vec4(color, 1.0);
            }
            >>
    shader_set cel_color := (CELL_COLOR_R; CELL_COLOR_G; CELL_COLOR_B)

// -------------------------------------------------------------------------------------------------------------------
//   Gooch shading
//   For further informations, see http://www.yaldex.com/open-gl/ch18lev1sec2.html
// -------------------------------------------------------------------------------------------------------------------
DIFFUSE_WARM -> 0.45
DIFFUSE_WARM := 0.45

DIFFUSE_COOL -> 0.045
DIFFUSE_COOL := 0.045

//Define warm color
WARM_COLOR_R -> 1.0
WARM_COLOR_R := 1.0
WARM_COLOR_G -> 1.0
WARM_COLOR_G := 1.0
WARM_COLOR_B -> 1.0
WARM_COLOR_B := 1.0

//Define cool color
COOL_COLOR_R -> 0.0
COOL_COLOR_R := 0.0
COOL_COLOR_G -> 0.0
COOL_COLOR_G := 0.0
COOL_COLOR_B -> 0.0
COOL_COLOR_B := 0.0

//Define surface color
SURFACE_COLOR_R -> 1.0
SURFACE_COLOR_R := 1.0
SURFACE_COLOR_G -> 1.0
SURFACE_COLOR_G := 1.0
SURFACE_COLOR_B -> 1.0
SURFACE_COLOR_B := 1.0

warm_color r:real, g:real, b:real ->
    /**
    * Define warm color for gooch shading
    **/
    WARM_COLOR_R := r
    WARM_COLOR_G := g
    WARM_COLOR_B := b

cool_color r:real, g:real, b:real ->
    /**
    * Define cool color for gooch shading
    **/
    COOL_COLOR_R := r
    COOL_COLOR_G := g
    COOL_COLOR_B := b

surface_color r:real, g:real, b:real ->
    /**
    * Define surface color for gooch shading
    **/
    SURFACE_COLOR_R := r
    SURFACE_COLOR_G := g
    SURFACE_COLOR_B := b

warm_diffuse w:real ->
    /**
    * Define warm diffuse coeff for gooch shading
    **/
    DIFFUSE_WARM := w


cool_diffuse c:real ->
    /**
    * Define cool diffuse coeff for gooch shading
    **/
    DIFFUSE_COOL := c

gooch_shading ->
    /**
    * Apply gooch shading on current scene.
    * It change current color in a toon one, result of a mix
    * between these define by surface_color, cool_color and warm_color.
    * Mixing coefficients are defined by diffuse_warm and diffuse_cool.
    **/
    if SHADER4_AVAILABLE_SHADING = true then
        gooch_shading_lights
    else
        gooch_shading_no_lights

gooch_shading_lights ->
    /**
    * Apply gooch shading on current scene with a full support of lights.
    **/
    shader_program
        shader_log
        vertex_shader <<
           varying vec3 normal;
           varying vec3 eyePos;

           void main()
           {
               gl_Position = ftransform();

               normal = normalize(gl_NormalMatrix * gl_Normal);
               eyePos = normalize((gl_ModelViewMatrix * gl_Vertex).xyz);
           }
           >>
        fragment_shader <<
           #extension GL_EXT_gpu_shader4 : require

           uniform float diffuse_warm;
           uniform float diffuse_cool;

           uniform vec3 warm_color;
           uniform vec3 cool_color;
           uniform vec3 surface_color;

           uniform int  lights;

           varying vec3 normal;
           varying vec3 eyePos;
           void main()
           {           
               // Define a maximum of lights
               int MAX_LIGHTS = 8;

               float diff = 0.0;
               float spec = 0.0;

               if(lights == 0)
               {
                   vec3 lightDir       = normalize(gl_LightSource[0].position.xyz - eyePos);
                   vec3 reflectVec     = normalize(reflect( -lightDir, normal ));

                   //Diffuse intensity
                   diff = max(dot(normal,lightDir), 0.0);

                   //Specular intensity
                   if (diff > 0.0)
                   {
                      spec = max(dot(reflectVec, -eyePos), 0.0);
                      spec = pow(spec, 32.0);
                   }
               }
               else
               {
                   for(int i = 0; i < MAX_LIGHTS; i++)
                   {
                       if(bool(lights & (1 << i)))
                       {

                           vec3 lightDir       = normalize(gl_LightSource[i].position.xyz - eyePos);
                           vec3 reflectVec     = normalize(reflect( -lightDir, normal ));

                           //Diffuse intensity
                           float diffTmp = max(dot(normal,lightDir), 0.0);

                           //Specular intensity
                           if (diffTmp > 0.0)
                           {
                              float specTmp = max(dot(reflectVec, -eyePos), 0.0);
                              spec += pow(specTmp, 32.0);
                           }

                           diff += diffTmp;
                       }
                   }
               }

               //Mix colors
               vec3 kcool  = min(cool_color + diffuse_cool * surface_color, 1.0);
               vec3 kwarm  = min(warm_color + diffuse_warm * surface_color, 1.0);
               vec3 kfinal = mix(kcool, kwarm, diff);

               //Compute final color
               gl_FragColor = vec4(min(kfinal + spec, 1.0), 1.0);
           }
           >>
    shader_set lights        := lights_mask;
    shader_set diffuse_warm  := DIFFUSE_WARM;
    shader_set diffuse_cool  := DIFFUSE_COOL;
    shader_set warm_color    := (WARM_COLOR_R; WARM_COLOR_G; WARM_COLOR_B)
    shader_set cool_color    := (COOL_COLOR_R; COOL_COLOR_G; COOL_COLOR_B)
    shader_set surface_color := (SURFACE_COLOR_R; SURFACE_COLOR_G; SURFACE_COLOR_B)

gooch_shading_no_lights ->
    /**
    * Apply gooch shading on current scene with the support of an unique light.
    **/
    shader_program
        shader_log
        vertex_shader <<
           varying vec3 normal;
           varying vec3 eyePos;
           void main()
           {
               gl_Position = ftransform();

               normal = normalize(gl_NormalMatrix * gl_Normal);
               eyePos = normalize((gl_ModelViewMatrix * gl_Vertex).xyz);
           }
           >>
        fragment_shader <<
           uniform float diffuse_warm;
           uniform float diffuse_cool;

           uniform vec3 warm_color;
           uniform vec3 cool_color;
           uniform vec3 surface_color;

           varying vec3 normal;
           varying vec3 eyePos;
           void main()
           {
               float diff = 0.0;
               float spec = 0.0;

               vec3 lightDir       = normalize(gl_LightSource[0].position.xyz - eyePos);
               vec3 reflectVec     = normalize(reflect( -lightDir, normal ));

               //Diffuse intensity
               diff = max(dot(normal,lightDir), 0.0);

               //Specular intensity
               if (diff > 0.0)
               {
                  spec = max(dot(reflectVec, -eyePos), 0.0);
                  spec = pow(spec, 32.0);
               }

               //Mix colors
               vec3 kcool  = min(cool_color + diffuse_cool * surface_color, 1.0);
               vec3 kwarm  = min(warm_color + diffuse_warm * surface_color, 1.0);
               vec3 kfinal = mix(kcool, kwarm, diff);

               //Compute final color
               gl_FragColor = vec4(min(kfinal + spec, 1.0), 1.0);
           }
           >>
    shader_set diffuse_warm  := DIFFUSE_WARM;
    shader_set diffuse_cool  := DIFFUSE_COOL;
    shader_set warm_color    := (WARM_COLOR_R; WARM_COLOR_G; WARM_COLOR_B)
    shader_set cool_color    := (COOL_COLOR_R; COOL_COLOR_G; COOL_COLOR_B)
    shader_set surface_color := (SURFACE_COLOR_R; SURFACE_COLOR_G; SURFACE_COLOR_B)

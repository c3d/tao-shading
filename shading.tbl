// *****************************************************************************
// shading.tbl                                                     Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the "Shading" module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2011-2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2011-2013, Catherine Burvelle <catherine@taodyne.com>
// (C) 2011-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2011-2013, Jérôme Forissier <jerome@taodyne.com>
// (C) 2011-2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

#include "shading_factory.h"

// ----------------------------------------------------------------------------
//   CEL SHADING
// ----------------------------------------------------------------------------

PREFIX(CelColor,  tree, "cel_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return cel_color(self, r, g, b),
       GROUP(module.Shading)
       SYNOPSIS("Set cel shading color.")
       DESCRIPTION("Set cel shading color."))

PREFIX(CelShading,  tree, "cel_shading",
       PARM(a, real, ),
       return cel_shading(self, a),
       GROUP(module.Shading)
       SYNOPSIS("Apply cel shading")
       DESCRIPTION("Apply cel shading (or toon shading). "
                   "For further informations, see http://en.wikipedia.org/wiki/Cel-shaded_animation"))


// ----------------------------------------------------------------------------
//   GOOCH SHADING
// ----------------------------------------------------------------------------

PREFIX(WarmDiffuse,  tree, "warm_diffuse",
       PARM(r, real, ),
       return warm_diffuse(self, r),
       GROUP(module.Shading)
       SYNOPSIS("Define warm diffuse coeff for gooch shading.")
       DESCRIPTION("Define warm diffuse coeff for gooch shading."))

PREFIX(CoolDiffuse,  tree, "cool_diffuse",
       PARM(r, real, ),
       return cool_diffuse(self, r),
       GROUP(module.Shading)
       SYNOPSIS("Define cool diffuse coeff for gooch shading.")
       DESCRIPTION("Define cool diffuse coeff for gooch shading."))

PREFIX(WarmColor,  tree, "warm_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return warm_color(self, r, g, b),
       GROUP(module.Shading)
       SYNOPSIS("Define warm color for gooch shading.")
       DESCRIPTION("Define warm color for gooch shading."))

PREFIX(CoolColor,  tree, "cool_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return cool_color(self, r, g, b),
       GROUP(module.Shading)
       SYNOPSIS("Define cool color for gooch shading.")
       DESCRIPTION("Define cool color for gooch shading."))

PREFIX(SurfaceColor,  tree, "surface_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return surface_color(self, r, g, b),
       GROUP(module.Shading)
       SYNOPSIS("Define surface color for gooch shading.")
       DESCRIPTION("Define surface color for gooch shading."))

PREFIX(GoochShading,  tree, "gooch_shading",
       PARM(a, real, ),
       return gooch_shading(self, a),
       GROUP(module.Shading)
       SYNOPSIS("Apply gooch shading")
       DESCRIPTION(" Apply gooch shading on current scene."
                   " It change current color in a toon one, result of a mix"
                   " between these define by surface_color, cool_color and warm_color."
                   " Mixing coefficients are defined by diffuse_warm and diffuse_cool."
                   " For further informations, see http://www.yaldex.com/open-gl/ch18lev1sec2.html"))
